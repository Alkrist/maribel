#version 430

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, r16f) uniform writeonly image2D ssao_out;
layout (binding = 1, rgba32f) uniform readonly image2DMS worldPositionSampler;
layout (binding = 2, rgba16f) uniform readonly image2DMS normalSampler;
layout (binding = 3, rgba16f) uniform readonly image2D noiseSampler;

uniform vec3 kernel[64];
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform int kernelSize;
uniform float uRadius;
uniform float threshold;
uniform int width;
uniform int height;

const float ZFAR = 10000;

void main(void){
	ivec2 computeCoord = ivec2(gl_GlobalInvocationID.xy);

	vec3 worldPos = imageLoad(worldPositionSampler, computeCoord, 0).rgb;

	vec3 viewPos = (viewMatrix * vec4(worldPos,1.0)).xyz;

	float actualDepth = viewPos.z/ZFAR;

	vec3 normal = imageLoad(normalSampler, computeCoord, 0).rgb;

	ivec2 noiseCoord = computeCoord - ivec2(floor(gl_GlobalInvocationID.x/4), floor(gl_GlobalInvocationID.y/4)) * 4;

	vec3 rvec = imageLoad(noiseSampler, noiseCoord).rgb;
	vec3 tangent = normalize(rvec - normal * dot(rvec, normal));
	vec3 bitangent = cross(normal, tangent);
	mat3 tbn = mat3(tangent, bitangent, normal);

	float occlusion = 0.0;
	float occlusionOffset = 0.0;

	for (int i = 0; i < kernelSize; ++i){
		// get sample position
		vec3 sampleVec = tbn * kernel[i];
		sampleVec = sampleVec * uRadius + viewPos;

		// project sample position
		vec4 offset = vec4(sampleVec, 1.0);
		offset = projectionMatrix * offset;
		offset.xy /= offset.w;
		offset.xy = offset.xy * 0.5 + 0.5;

		// get sample depth
		float sampleDepth = (viewMatrix * vec4(imageLoad(worldPositionSampler,ivec2(offset.x * width, offset.y * height), 0).rgb,1.0)).z/ZFAR;

		// range check and accumulate
		float rangeCheck = abs(actualDepth - sampleDepth) < threshold ? 1.0 : 0.0;

		occlusionOffset = (sampleDepth <= sampleVec.z/ZFAR ? 1.0 : 0.0) * rangeCheck;
		occlusion += occlusionOffset;
	}

	occlusion = (1.0 - (occlusion / float(kernelSize)));
	imageStore(ssao_out, computeCoord, vec4(occlusion,0,0,1.0));
}
