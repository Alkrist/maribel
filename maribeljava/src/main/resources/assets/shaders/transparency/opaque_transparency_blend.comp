#version 430 core

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba16f) uniform writeonly image2D finalColor_out;

layout(binding = 1, rgba16f) uniform readonly image2D opaqueSceneTexture;
layout(binding = 2, rgba16f) uniform readonly image2D transparencyLayer;

layout(binding = 3) uniform sampler2DMS opaqueSceneDepthMap;
layout(binding = 4) uniform sampler2D transparencyLayerDepthMap;
layout(binding = 5) uniform sampler2D transparencyAlphaMap;

const float width = 1280;
const float height = 720;

void main(void){
	ivec2 computeCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	vec2 uv = vec2(gl_GlobalInvocationID.x/width, gl_GlobalInvocationID.y/height);

	vec4 opaqueColor = imageLoad(opaqueSceneTexture, computeCoord);
	vec4 transparencyColor = imageLoad(transparencyLayer, computeCoord);
	vec4 opaqueDepth = texelFetch(opaqueSceneDepthMap, computeCoord, 0);
	vec4 transparencyDepth = texture(transparencyLayerDepthMap, uv);
	float alpha = texture(transparencyAlphaMap, uv).r;

	vec4 rgba;
	if (opaqueDepth.r <= transparencyDepth.r){
			rgba = opaqueColor;
	}
	else{
		rgba = transparencyColor * alpha + opaqueColor * (1-alpha);
	}

	imageStore(finalColor_out, computeCoord, rgba);
}
