#version 430

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, r16f) uniform writeonly image2D ssaoBlur_out;
layout (binding = 1, r16f) uniform readonly image2D ssao_in;
layout (binding = 2, rgba16f) uniform writeonly image2D debug_out;
const int BLUR_SIZE = 4;

void main() {
    ivec2 computeCoord = ivec2(gl_GlobalInvocationID.xy);
    float kernelSize = float(BLUR_SIZE * BLUR_SIZE);
    float result = 0.0;

    // Iterate over the blur kernel
    for (int i = -BLUR_SIZE / 2; i <= BLUR_SIZE / 2; ++i) {
        for (int j = -BLUR_SIZE / 2; j <= BLUR_SIZE / 2; ++j) {
            ivec2 offset = ivec2(i, j);
            ivec2 sampleCoord = computeCoord + offset;

            // Ensure sampling within texture boundaries
            sampleCoord = clamp(sampleCoord, ivec2(0), imageSize(ssao_in) - 1);

            // Accumulate SSAO values
            result += imageLoad(ssao_in, sampleCoord).r;
        }
    }

    // Normalize the result
    result /= kernelSize;


    imageStore(debug_out, computeCoord, vec4(result, result, result,1.0));
    imageStore(ssaoBlur_out, computeCoord, vec4(result, 0.0, 0.0, 1.0));

    // Store the result in the output texture

}
